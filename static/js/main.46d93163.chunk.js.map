{"version":3,"sources":["components/Container/index.js","components/Wrapper/index.js","utils/API.js","components/Form/index.js","components/Row/index.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","Wrapper","axios","get","Form","value","search","onChange","handleInputChange","name","list","type","placeholder","id","onClick","handleFormSubmit","EmployeeTable","useState","employees","setEmployees","emps","showAsc","filteredEmps","setFilteredEmps","useEffect","API","then","res","data","results","console","log","empsToDisplay","length","e","filterResult","filter","employee","location","state","substring","target","toLowerCase","compareAsc","a","b","first","compareDsc","newEmpOrder","sort","newFilteredOrder","map","key","src","picture","large","alt","last","city","cell","email","Search","lastName","style","minHeight","Component","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qUASeA,MALf,SAAmBC,GACf,OAAO,yBAAKC,UAAU,e,qBCEXC,MAJf,SAAiBF,GACf,OAAO,wCAAMC,UAAU,WAAcD,K,iBCDxB,EACL,WACN,OAAOG,IAAMC,IAJD,iD,MC4BDC,MA1Bf,SAAcL,GACV,OACI,0BAAMC,UAAU,UACZ,yBAAKA,UAAU,cACX,2BAEAK,MAAON,EAAMO,OAEbC,SAAUR,EAAMS,kBAChBC,KAAK,OACLC,KAAK,QACLC,KAAK,OACLX,UAAU,eAEVY,YAAY,iCACZC,GAAG,eAEP,4BAAQF,KAAK,SAASG,QAASf,EAAMgB,iBAAkBf,UAAU,mBAAjE,aC+FGgB,MA7Gf,WAA0B,IAAD,EAESC,mBAAS,IAFlB,mBAElBC,EAFkB,KAEPC,EAFO,OAIeF,mBAAS,CAC7CG,KAAM,GACNC,SAAS,IANY,mBAIlBC,EAJkB,KAIJC,EAJI,KASvBC,qBAAU,WACNC,IACGC,MAAK,SAAAC,GACJR,EAAaQ,EAAIC,KAAKC,cAE3B,IAoDHC,QAAQC,IAAI,oBAAqBb,GACjCY,QAAQC,IAAI,kBAAmBT,GAC/B,IAAIU,EAAgBd,EAKlB,OAHEI,EAAaF,KAAKa,OAAS,IAC7BD,EAAeV,EAAaF,MAG1B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMZ,kBA3DS,SAAC0B,GACpB,IAAMC,EAAejB,EAAUkB,QAAO,SAAAC,GAAQ,OAAIA,EAASC,SAASC,MAAMC,UAAU,EAAGN,EAAEO,OAAOpC,MAAM4B,QAAQS,gBAAkBR,EAAEO,OAAOpC,MAAMqC,iBAC/IZ,QAAQC,IAAI,eAAgBI,GAE5BZ,EAAgB,2BAAID,GAAL,IAAmBF,KAAMe,QAyDpC,yBAAKnC,UAAU,WACX,2BAAOA,UAAU,mCAEb,2BAAOA,UAAU,cACb,4BACE,qCACA,wBAAIc,QA3DP,WAEf,SAAS6B,EAAYC,EAAGC,GACtB,OAAKD,EAAEnC,KAAKqC,MAAQD,EAAEpC,KAAKqC,OACjB,EAELF,EAAEnC,KAAKqC,MAAQD,EAAEpC,KAAKqC,MAClB,EAEF,EAGT,SAASC,EAAYH,EAAGC,GACtB,OAAKD,EAAEnC,KAAKqC,MAAQD,EAAEpC,KAAKqC,OACjB,EAELF,EAAEnC,KAAKqC,MAAQD,EAAEpC,KAAKqC,MAClB,EAEF,EAIT,GAtBAhB,QAAQC,IAAI,mBAsBRT,EAAaD,QACf,IAAI2B,EAAc9B,EAAU+B,KAAKN,GAE7BO,EAAmB5B,EAAaF,KAAK6B,KAAKN,QAE1CK,EAAc9B,EAAU+B,KAAKF,GAE7BG,EAAmB5B,EAAaF,KAAK6B,KAAKF,GAKhD5B,EAAa6B,GACbzB,EAAgB,2BAAID,GAAL,IAAmBF,KAAM8B,EAAkB7B,SAAUC,EAAaD,WACjFS,QAAQC,IAAI,cAAeiB,EAAaE,KAsBtB,cACA,yCACA,oCACA,qCACA,0CACA,uCAGN,+BAEGlB,EAAcmB,KAAI,SAAAd,GAAQ,OACzB,wBAAIe,IAAKf,EAASxB,GAAGR,OACnB,4BAAI,yBAAKgD,IAAKhB,EAASiB,QAAQC,MAAOC,IAAI,iBAC1C,4BAAKnB,EAAS5B,KAAKqC,OACnB,4BAAKT,EAAS5B,KAAKgD,MACnB,4BAAKpB,EAASC,SAASoB,MACvB,4BAAKrB,EAASC,SAASC,OACvB,4BAAKF,EAASsB,MACd,4BAAKtB,EAASuB,gBCrFrBC,E,4MAjBXtB,MAAQ,CACJuB,SAAU,GACVjC,QAAS,GACTvB,OAAQ,I,uDAIR,OACE,6BACE,kBAAC,EAAD,CAAWyD,MAAO,CAAEC,UAAW,QAC7B,kBAAC,EAAD,Y,GAXOC,aCgBNC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,EAAD,UCDUS,QACW,cAA7BC,OAAOjC,SAASkC,UAEe,UAA7BD,OAAOjC,SAASkC,UAEhBD,OAAOjC,SAASkC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.46d93163.chunk.js","sourcesContent":["// imports react\nimport React from \"react\";\n\n// function to hold Container component\nfunction Container(props) {\n    return <div className=\"container\"></div>\n}\n\n// exports conatiner function\nexport default Container\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=90&nat=us\";\n\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction Form(props) {\n    return(\n        <form className=\"search\">\n            <div className=\"form-group\">\n                <input \n                // assignes value of props.search\n                value={props.search} \n                // function to handle change in input field\n                onChange={props.handleInputChange}\n                name=\"name\"\n                list=\"names\"\n                type=\"text\"\n                className=\"form-control\"\n                // displays message until user starts typing\n                placeholder=\"Search for an employee by name\"\n                id=\"searchName\"\n                />\n            <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n                Search\n            </button>\n\n            </div>\n        </form>\n    )\n}\n\nexport default Form;","import React, { useState, useEffect } from \"react\";\nimport Wrapper from \"../Wrapper\";\nimport API from \"../../utils/API\";\nimport Form from \"../Form\";\n\n\nfunction EmployeeTable() {\n\n  let [employees, setEmployees] = useState([]);\n\n  let [filteredEmps, setFilteredEmps] = useState({\n    emps: [],\n    showAsc: true\n  })\n\n  useEffect(() => {\n      API.search()\n        .then(res => {\n          setEmployees(res.data.results)\n      });      \n  }, [])\n\n  let searchFunction = (e) => {\n    const filterResult = employees.filter(employee => employee.location.state.substring(0, e.target.value.length).toLowerCase() === e.target.value.toLowerCase());\n    console.log('filter stuff', filterResult)\n    //setEmployees(filterResult)\n    setFilteredEmps({...filteredEmps, emps: filterResult})\n  \n  }\n\n  let handleSort = () => {\n    console.log('we got clicked!')\n    function compareAsc( a, b ) {\n      if ( a.name.first < b.name.first ){\n        return -1;\n      }\n      if ( a.name.first > b.name.first ){\n        return 1;\n      }\n      return 0;\n    }\n\n    function compareDsc( a, b ) {\n      if ( a.name.first > b.name.first ){\n        return -1;\n      }\n      if ( a.name.first < b.name.first ){\n        return 1;\n      }\n      return 0;\n    }\n\n\n    if (filteredEmps.showAsc) {\n      var newEmpOrder = employees.sort(compareAsc)\n     \n      var newFilteredOrder = filteredEmps.emps.sort(compareAsc)\n    } else {\n      var newEmpOrder = employees.sort(compareDsc)\n     \n      var newFilteredOrder = filteredEmps.emps.sort(compareDsc)\n    }\n\n   \n\n    setEmployees(newEmpOrder)\n    setFilteredEmps({...filteredEmps, emps: newFilteredOrder, showAsc: !filteredEmps.showAsc})\n    console.log('new orderrs', newEmpOrder, newFilteredOrder)\n  \n\n  }\n\n  console.log('this is our state', employees)\n  console.log('Filtered emps!!', filteredEmps)\n  var empsToDisplay = employees\n\n  if (filteredEmps.emps.length > 0) {\n    empsToDisplay =filteredEmps.emps\n  }\n    return (\n      <Wrapper>\n        <Form handleInputChange = {searchFunction}/>\n        {/* Container to hold a row, which is for one employee */}\n        <div className=\"content\">\n            <table className=\"table table-striped table-hover\">\n                {/* Thread to hold list of items for employee */}\n                <thead className=\"thead-dark\">\n                    <tr>\n                      <th>Photo</th>\n                      <th onClick={handleSort}>First Name</th>\n                      <th>Last Name</th>\n                      <th>City</th>\n                      <th>State</th>\n                      <th>Cell Phone</th>\n                      <th>Email</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {/* Populates thread with info from API */}\n                  {empsToDisplay.map(employee => (\n                    <tr key={employee.id.value}>\n                      <td><img src={employee.picture.large} alt=\"Profile pic\"/></td>\n                      <td>{employee.name.first}</td>\n                      <td>{employee.name.last}</td>\n                      <td>{employee.location.city}</td>\n                      <td>{employee.location.state}</td>\n                      <td>{employee.cell}</td>\n                      <td>{employee.email}</td>\n                    </tr>))}\n                </tbody>\n            </table>\n        </div>\n      </Wrapper>\n                  )}\n\nexport default EmployeeTable;\n\n","import React, { Component } from \"react\";\nimport Container from \"../components/Container\";\nimport EmployeeTable from \"../components/Row\";\n\nclass Search extends Component {\n    state = {\n        lastName: \"\",\n        results: [],\n        search: []\n    }\n\n    render() {\n        return (\n          <div>\n            <Container style={{ minHeight: \"80%\" }}>\n              <EmployeeTable/>\n            </Container>\n          </div>\n        );\n      }\n}\n\nexport default Search","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Search from \"./pages/Directory\"\nimport Wrapper from \"./components/Wrapper\";\nimport EmployeeTable from \"./components/Row\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Wrapper>\n          <Route exact path=\"/\" component={Search} />\n          <EmployeeTable />\n        </Wrapper>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}